import { spawn } from "child_process";
import * as path from "path";
import * as packageJson from "../package.json";

// Resolve the path to the CLI file. Adjust the relative path as needed.
const cliPath = path.join(__dirname, "../bin/cxsd.js");

describe("bin/cli.js", () => {
  test("prints help message when --help is provided", (done) => {
    // Spawn the CLI with the --help flag.
    const child = spawn("node", [cliPath, "--help"]);

    let output = "";
    child.stdout.on("data", (data) => {
      output += data.toString();
    });

    child.stderr.on("data", (data) => {
      // In case errors are printed, include them in the output.
      output += data.toString();
    });

    child.on("close", (code) => {
      try {
        expect(code).toBe(0);
        // The help message generated by Commander usually includes "Usage:".
        expect(output).toMatch(/Usage:/);
        done();
      } catch (err) {
        done(err);
      }
    });
  });

  test("prints version when --version is provided", (done) => {
    const expectedVersion = packageJson.version;

    // Spawn the CLI with the --version flag.
    const child = spawn("node", [cliPath, "--version"]);

    let output = "";
    child.stdout.on("data", (data) => {
      output += data.toString();
    });

    child.stderr.on("data", (data) => {
      output += data.toString();
    });

    child.on("close", (code) => {
      try {
        expect(code).toBe(0);
        expect(output.trim()).toBe(expectedVersion);
        done();
      } catch (err) {
        done(err);
      }
    });
  });
});
